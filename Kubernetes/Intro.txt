- Container - A collection of software processes unified by one
              namespace, with access to an operating system kernel
              that it shares with other containers and little to
              no access between containers.
- Docker Instance - A runtime instance of a Docker image containers
                    three things:
                      i) A Docker image
                      ii) An execution environment
                      iii) A standard set of instructions

    ## Core elements of Docker ecosystem
        - Docker Engine
            - Comprised of the runtime and packaging tool
            - Must be installed on the hosts that run Docker

        - Docker Store
            - An online cloud service where users can store and share their
              Docker images
            - Also known as Docker Hub

- Orchestration is the automated configuration, management, and coordination
  of computer systems, applications, and services

## Orchestrator Features
  - Provision hosts
  - Instantiate containers on a host
  - Restart failing containers
  - Expose containers as services outside the cluster
  - Scale the cluster up or down

## Kubernetes(K8s)
  - An open-source platform designed to automate deploying,
    scaling, and operating application containers.
  - K8s is an open source project that enables software teams of all sizes,
    from a small startup to a Fortune 100 company, to automate deploying,
    scaling, and managing applications on a group or cluster of server machines.
  - Goal: to foster an ecosystem of components and tools that
    relieve the burden of running applications in public and
    private clouds
  - Kubernetes is a platform to schedule and run containers on
    clusters of virtual machines. It runs on bare metal, virtual machines,
    private datacenter and public cloud.

    ## K8s Features
      i) Multi-Host Container Scheduling
        - Done by the kube-scheduler
        - Assigns pods to nodes at runtime
        - Checks resources, quality of service, policies, and user specs b4 scheduling
      ii) Scalability and Availability
        - K8s master can be deployed in a highly available configuration
        - Multi-region deployments available
      iii) Flexibility and Modularity
        - Plug and play architecture
        - Extend architecture when needed
        - Add-ons: network drivers, service discovery, container runtime, visualization,
          and command
      iv) Registration
        - Seamless nodes register themselves with master.
      v) Service Discovery
        - Automatic detection of services and endpoints via DNS or environment variables
      vi) Persistent Storage
        - Much requested and important feature when working with containers.
        - Pods can use persistent volumes to store data
        - Data retained across pod restarts and crashes
      vii) Application Upgrades and Downgrades
        - Upgrades: rolling updates supported
        - Downgrades: rollbacks are supported
      viii) Maintenance
        - Features are backward compatible
        - APIs are versioned
        - Turn off/on host during maintenance
      ix) Logging and Monitoring
        - Application Monitoring built-in
          - TCP, HTTP, or container execution health check
        - Node health check
          - Failures monitored by node controller
        - Kubernetes status
          - Add one: Heapster and cAdvisor
      x) Secrets Management
        - Sensitive data is first-class citizen
        - Mounted as data volumes or environment variables
        - Specific to namespace

    ## K8S Architecture
      - Master Node - Responsible for the overall management of k8s Cluster
                    - Has three components that take care of communication, scheduling and controllers
                    - components include:
                        - API Server - Allows you to interact with the K8s API.
                                     - Frontend of the K8s control plane.
                        - Scheduler - Watches created Pods who do not have a design yet.
                                    - Designs a pod to run on a specific node.
                        - Control Manager - Runs controllers.
                                          - Background threads that run in a cluster
                                          - Roles include:
                                              - node controller - Responsible for the worker state
                                              - replication controller - Responsible for maintaining the correct number of pods for replicated controller
                                              - Endpoint controller - Joins services and pods together

      - etcd - Simple distributed key value store
             - K8s uses etcd as db and stores all cluster data here.
             - Some of the info stored are:
                - Job scheduling info
                - pod details
                - state
      - kubectl - The command line interface for k8s.
                  kubeconfig - Has server info, authentication to access the API server
      Work Node - Node where your application operate. Work Node communicate back to the master node
                kubelet - Handles communication to a Work Node.
                        - Agent that communicates with the API server to see pods have been designed to the nodes
                        - Executes pod containers via the container engine. It mounts and runs pod volumes and secrets
                        - It is aware of pods and node states and responds back to the master node.
                kube-proxy - The network proxy and load balancer for the service on a single worker node.
                           - Handle network routing for TCP and UDP packets.
                           - Performs connection forwarding
                pod - The smallest unit that can be scheduled as a deployment in k8s.
                    - This group of containers share storage, linux namespace, IP addresses.


            ## Basic Building Blocks: Nodes and Pods
            Kubernetes Cluster
              - Node
              - Master
              - Node Processes

              ## Node
                  - Serves as a worker machine in k8s cluster. One important thing to note is that the node can be a physical
                    computer or a virtual machine.
                      # Node Requirements
                      - A kubelet running
                      - Container tooling like Docker
                      - A kube-proxy process running
                      - Supervisord

              ## POD
                  - The simplest unit that you can interact with. You can create, deploy, and
                    delete pods, and it represents one running process on your cluster.
                  - What's in the Pod?
                    - Your Docker application container
                    - Storage resources
                    - Unique network IP
                    - Options that govern how the containers should run
                  - Pods Are...
                    - Ephemeral, disposable
                    - Never self-heal, and not restarted by the scheduler by itself.
                    - Never create pods just by themselves
                    - Always use higher-level constructs
                    # Pod States
                      - Pending - A pod has been accepted by the k8s system but container hasn't been created yet
                      - Running - A pod has been scheduled on a Node and all of it's containers created and atleast
                                  one container is in a running state.
                      - Succeeded - All containers of a pod have exited and exit status of 0 which indicates successful execution
                                  and will not be restarted.
                      - Failed - All containers of a pod have exited and atleast one container has failed and return a non 0 exit status
                      - CrashLoopBackOff - A container fails to start for some reasons and k8s tries over and over to restart the pod.

      ## Benefits of Controllers
          - Application reliability
          - Scaling
          - Load balancing

      # Kinds of Controllers
          - ReplicaSet
            - Ensures that a specified number of replicas for a pod are running at all time
          - Deployments
            - A Deployment controller provides declarative updates for pods and ReplicaSets.
              # Deployment Controller Use Cases
                - Pod management - Running a ReplicaSet allows us to deploy a number of pods, and check
                                   their status as a single unit.
                - Scaling a ReplicaSet scales out the pods, and allows for the deployment to
                  handle more traffic.
                - Pause and Resume - Used with larger changesets
                                   - Pause deployments, make changes, resume deployment
                - Status
                -  Easy way to check the heath of pods, and identify issues.
          - DaemonSets
            - DaemonSets ensure that all nodes run a copy of a specific pod.
            - As nodes are added or removed from the cluster, a DaemonSet will add or remove the required pods.
            - e.g running a single node aggregator or monitoring tool.
          - Jobs
            - Supervisor process for pods carrying out batch jobs.
            - Run individual processes that run once and complete successfully.
          - Services
            - Allow the communication between one set of deployments with another.
            - Use a service to get pods in two deployments to talk to each other.

      # Kinds of Services
          - Internal: IP is only reachable within the cluster
          - External: Endpoint available through node ip: port(called NodePort)
          - Load balancer: Exposes application to the internet with a load balancer(available with a cloud provider)

      ## Labels, selectors, and namespace
        - Labels
          - Labels are key/value pairs that are attached to objects like pods, services, and deployments.
          - Labels are for users of Kubernetes to identify attributes for objects.
          - Examples of Labels:
              "release": "stable", "release": "canary"
              "environment" : "dev", "environment": "qa", "environment": "production"
              "tier" : "Frontend", "tier": "backend", "tier": "cache"
          Labels used with selectors gives you a powerful feature.
          Label selectors allow you to identify a set of objects

        - Selectors
          - Equality-based
            =
              Two labels or values of labels should be equal.
            !=
              The values of the labels should not be equal.

          - Set-based
            - IN: A value should be inside a set of defined values.
            - NOTIN: A value should not be in a set of defined values.
            - EXISTS: Determines whether a label exists or not.

        - Namespaces
          - A feature of K8S that allows you to have multiple virtual clusters backed by the same physical cluster.
          - Great for large enterprises
          - Allows teams to access resources, with accountability
          - Great way to divide cluster resources between users
          - Provides scope for names-must be unique in the namespace.
          - "Default" namespace created when you launch K8S.
          - Objects placed in "default" namespace at start
          - Newer applications install their resources in a different namespace

      ## Kubelet and Kub Proxy
          - Kubelet - The Kubelet is the "K8s node agent" that runs on each node.
                # Kubelet Roles
                  - Communicates with API server to see if pods have been assigned to nodes.
                  - Executes pod containers via a container engine
                  - Mounts and runs pod volumes and secrets
                  - Executes health checks to identify pod/node status

                # Kubelet and Podspec
                  - Podspec: YAML file that describes a pod
                  - The kubelet takes a set of Podspecs that are provided by the kube-apiserver and ensures that the containers
                    described in those Podspecs are running and healthy.
                  - Kubelet only manages containers that were created by the API server-not any container running on the node.

          - Kube-proxy: Network Proxy
              - Process that runs on all worker nodes
              - Reflects services as defined on each node, and can do simple network stream or round-robin forwarding across a set of backends
              - Service cluster IPs and ports are currently found through Docker --link compatible
                environment variables specifying ports opened by the service proxy
                # Modes of kube-Proxy
                  - User space mode
                  - Iptables Mode
                  - Ipvs mode (alpha feature)
                # Why these modes are important
                  - Services defined against the API server: kube-proxy watches the API server for the addition and removal of services
                  - For each new service, kube-proxy opens a randomly chosen port on the local node.
                  - Connections made to the chosen port are proxied to one of the corresponding back-end pods